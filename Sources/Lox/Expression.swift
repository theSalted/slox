//
// Expression.swift
//
//
// Generated by AbstractSyntaxTreeGenerator on 06/15/24
//


/*
 * Name like Expr and Stmt are abbreviations and is against
 * Swift's API Design Guidelines.
 */


protocol Expression {
    func accept<V: ExpressionVisitor, R>(visitor: V) -> R where R == V.ExpressionVisitorReturn
}

protocol ExpressionVisitor {
    associatedtype ExpressionVisitorReturn

    func visit(_ expr: Binary) -> ExpressionVisitorReturn
    func visit(_ expr: Grouping) -> ExpressionVisitorReturn
    func visit(_ expr: Literal) -> ExpressionVisitorReturn
    func visit(_ expr: Unary) -> ExpressionVisitorReturn
}

struct Binary: Expression {
    let lhs: Expression
    let `operator`: Token
    let rhs: Expression

    init(lhs: Expression, `operator`: Token, rhs: Expression) {
        self.lhs = lhs
        self.`operator` = `operator`
        self.rhs = rhs
    }

    func accept<V: ExpressionVisitor, R>(visitor: V) -> R where R == V.ExpressionVisitorReturn {
        return visitor.visit(self)
    }
}

struct Grouping: Expression {
    let expression: Expression

    init(expression: Expression) {
        self.expression = expression
    }

    func accept<V: ExpressionVisitor, R>(visitor: V) -> R where R == V.ExpressionVisitorReturn {
        return visitor.visit(self)
    }
}

struct Literal: Expression {
    let value: Any?

    init(value: Any?) {
        self.value = value
    }

    func accept<V: ExpressionVisitor, R>(visitor: V) -> R where R == V.ExpressionVisitorReturn {
        return visitor.visit(self)
    }
}

struct Unary: Expression {
    let `operator`: Token
    let rhs: Expression

    init(`operator`: Token, rhs: Expression) {
        self.`operator` = `operator`
        self.rhs = rhs
    }

    func accept<V: ExpressionVisitor, R>(visitor: V) -> R where R == V.ExpressionVisitorReturn {
        return visitor.visit(self)
    }
}

