//
// Expression.swift
//
//
// Generated by AbstractSyntaxTreeGenerator on 06/15/24
//


protocol Expression {
    func accept<V: ExpressionVisitor, R>(visitor: V) -> R where R == V.ExpressionVisitorReturn
}

protocol ExpressionVisitor {
    associatedtype ExpressionVisitorReturn

    func visit(_ expr: Binary) -> ExpressionVisitorReturn
}

struct Binary: Expression {
    let lhs: Expression
    let `operator`: Token
    let rhs: Expression

    init(lhs: Expression, `operator`: Token, rhs: Expression) {
        self.lhs = lhs
        self.`operator` = `operator`
        self.rhs = rhs
    }

    func accept<V: ExpressionVisitor, R>(visitor: V) -> R where R == V.ExpressionVisitorReturn {
        return visitor.visit(self)
    }
}

