//
//  AbstractSyntaxTreeGenerator.swift
//  
//
//  Created by Yuhao Chen on 6/14/24.
//

import Lox
import Foundation
import ArgumentParser


@main
struct GeneratorCommandLine: ParsableCommand {
    @Argument(help: "The path to operate on", transform: { URL(filePath: $0) })
    var outPutDirectory: URL
    
    mutating func run() throws {
        let generator = AbstractSyntaxTreeGenerator()
        
        generator.defineTree(output: outPutDirectory, baseName: "Expression", types: [
            TypeDefinition(name: "Binary", parameterField: "lhs: Expression, operator: Token, rhs: Expression")
        ])
    }
    
    
}


struct AbstractSyntaxTreeGenerator {
    
    let printer = CodePrinter()
    
    
    func defineTree(
        output outputDirectory: URL,
        baseName: String,
        types: [TypeDefinition]
    ) {
        printer.addFileHeader(
            fileName: baseName + ".swift",
            creatorInfo: "Generated by AbstractSyntaxTreeGenerator")
        printer.emptyLine()
        printer.emptyLine()
        printer.emptyLine()
        
        for type in types {
            printer.writeLine("struct \(type.name): \(baseName) {")
            
        }
        
        printer.print(to: outputDirectory)
        
    }
}



struct TypeDefinition {
    let name: String
    let parameterField: String
    init(name: String, parameterField: String) {
        self.name = name
        self.parameterField = parameterField
    }
}
